import tensorflow as tf

class TreeNN():
  def __init__(self, cell, parser):
    self.cell = cell
    self.parser = parser
    # !? what about learning to parse the inputs into a tree!?


  def __call__(self, w, sents):
    """
    Applies `self.cell` according to the tree(s) generated by `self.parser`.

    Args:
      w: a world
      sents (list): a list of strings

    Returns: (1, n)
    """
    # parse each sent independently
    trees = [self.parser(sent) for sent in sents]

    # a stack for keeping track of computed nodes
    states = []

    lens = [len(ops) for ops, _ in trees]
    # depth first traversal across all trees
    for i in range(max(lens)):
        opsnargs = []
        for ops, args in trees:  # each element of our batch
            if i<len(ops):  # make sure we dont try to index out of range
                args[i] = [i+a for a in args[i]]  # relative to abs
                opsnargs.append((ops[i], args[i]))
        state = self.cell(states, opsnargs)
        states.append(state)
    return states[-1]
